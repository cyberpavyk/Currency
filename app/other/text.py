import re
import logging
from decimal import Decimal, InvalidOperation
from decimal import InvalidOperation
from app.other.classes import GetData
from decimal import Decimal
from aiogram.utils.markdown import text, bold, code


async def set_text():
    r"""
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ç–∏—Ä–æ–≤–∫–∞–º–∏ –≤–∞–ª—é—Ç.
    
    :return: –°—Ç—Ä–æ–∫–∞ —Å –∫–æ—Ç–∏—Ä–æ–≤–∫–∞–º–∏ –≤–∞–ª—é—Ç.
    """
    gd = GetData()
    res: dict = await gd()
    logging.info(f"–î–∞–Ω–Ω—ã–µ –æ—Ç GetData: {res}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π
    required_keys = ['investing', 'abcex', 'centralb', 'xe_usd',
                     'centralb_eur', 'xe_e_r', 'centralb_cny', 'xe_cny', 'xe_eur']
    if not all(key in res for key in required_keys) or 'price' not in res.get('investing', {}):
        logging.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ res: {res}")
        return "–û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫"

    ch: dict = await price_correction(res)
    if ch is None:
        logging.error(f"price_correction –≤–µ—Ä–Ω—É–ª None –¥–ª—è –¥–∞–Ω–Ω—ã—Ö: {res}")
        return "–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫"

    main_text = text(
        bold("üìä –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç üìä"), "\n\n",
        bold("üíµ USD/RUB"), "\n",
        "‚Ä¢ Investing:", " ", code(res['investing']['price']),
        " ", f"\\({res['investing']['change']} —Ä—É–± –∏–ª–∏ {str(res['investing']['percent']).replace('(', '\\(').replace(')', '\\)')}\\)", "\n",
        "‚Ä¢ ABCEX \\(USDT\\):", " ", code(res['abcex']), " ",
        ch['abcex'], "\n",
        "‚Ä¢ –¶–ë –†–§:", " ", code(res['centralb']), " ",
        ch['central'], "\n",
        "‚Ä¢ XE:", " ", code(res['xe_usd']), " ",
        ch['xe'], "\n\n",
        bold("üá™üá∫ EUR/RUB"), "\n",
        "‚Ä¢ –¶–ë –†–§:", " ", code(res['centralb_eur']), "\n",
        "‚Ä¢ XE:", " ", code(res['xe_e_r']), "\n\n",
        bold("üá®üá≥ CNY/RUB"), "\n",
        "‚Ä¢ –¶–ë –†–§:", " ", code(res['centralb_cny']), "\n\n",
        bold("üåê –î—Ä—É–≥–∏–µ –ø–∞—Ä—ã"), "\n",
        "‚Ä¢ XE CNY/USD:", " ", code(res['xe_cny']), "\n",
        "‚Ä¢ XE EUR/USD:", " ", code(res['xe_eur'])
    )

    return main_text.replace('+', '\\+').replace('.', ',') if '+' in main_text else main_text.replace('-', '\\-').replace('.', ',')
async def price_correction(imp: dict) -> dict:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã USD\\RUB –∫ Investing.com
    :imp: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫
    :return: —Å–ª–æ–≤–∞—Ä—å —Å —Å—Ç—Ä–æ–∫–∞–º–∏ —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    required_keys = ['investing', 'abcex', 'centralb', 'xe_usd']
    if not all(key in imp for key in required_keys) or 'price' not in imp.get('investing', {}):
        logging.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏ –≤ –¥–∞–Ω–Ω—ã—Ö: {imp}")
        return None

    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ Decimal
        invest_str = normalize_number_string(imp['investing']['price'])
        abcex_str = normalize_number_string(imp['abcex'])
        central_str = normalize_number_string(imp['centralb'])
        xe_str = normalize_number_string(imp['xe_usd'])

        if any(s is None for s in [invest_str, abcex_str, central_str, xe_str]):
            logging.error(
                f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: invest={invest_str}, abcex={abcex_str}, central={central_str}, xe={xe_str}, –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {imp}")
            return None

        invest = Decimal(invest_str)
        abcex = Decimal(abcex_str)
        central = Decimal(central_str)
        xe = Decimal(xe_str)
    except (KeyError, ValueError, InvalidOperation) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}, –¥–∞–Ω–Ω—ã–µ: {imp}")
        return None

    abcex_perc = (abs(invest - abcex) / invest) * 100
    cent_perc = (abs(invest - central) / invest) * 100
    xe_perc = (abs(invest - xe) / invest) * 100

    abcex_perc_str = f'{abcex_perc:.2f}%'
    cent_perc_str = f'{cent_perc:.2f}%'
    abcex_rub_str = f'{abs(invest - abcex):.2f} —Ä—É–±'
    cent_rub_str = f'{abs(invest - central):.2f} —Ä—É–±'
    xe_rub_str = f'{abs(invest - xe):.2f} —Ä—É–±'
    xe_perc_str = f'{xe_perc:.2f}%'

    def pointer(diff): return ['‚¨Ü', '‚ûï'] if invest < diff else ['‚¨á', '‚ûñ']

    return {
        "abcex": f"\\({pointer(abcex)[0]} {abcex_perc_str} –∏–ª–∏ {pointer(abcex)[1]}{abcex_rub_str}\\)",
        "central": f"\\({pointer(central)[0]} {cent_perc_str} –∏–ª–∏ {pointer(central)[1]}{cent_rub_str}\\)",
        "xe": f"\\({pointer(xe)[0]} {xe_perc_str} –∏–ª–∏ {pointer(xe)[1]}{xe_rub_str}\\)"
    }


def normalize_number_string(value: str) -> str:
    """–û—á–∏—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —á–∏—Å–ª–æ–º, —É–±–∏—Ä–∞—è –ø—Ä–æ–±–µ–ª—ã, –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏."""
    if not value or value.strip() in ('', 'abcex_error'):
        logging.error(f"–ü—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {value}")
        return None

    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã, –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã (\xa0) –∏ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
    cleaned = value.replace('\xa0', '').replace(
        ' ', '').replace(',', '.').strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º —á–∏—Å–ª–æ–º (—Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ –º–∏–Ω—É—Å)
    if not re.match(r'^-?\d*\.?\d+$', cleaned):
        logging.error(
            f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {cleaned}, –∏—Å—Ö–æ–¥–Ω–æ–µ: {value}")
        return None

    return cleaned
